// node_modules/@lit/reactive-element/css-tag.js
var t = globalThis;
var e = t.ShadowRoot && (void 0 === t.ShadyCSS || t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var s = Symbol();
var o = /* @__PURE__ */ new WeakMap();
var n = class {
  constructor(t4, e6, o4) {
    if (this._$cssResult$ = true, o4 !== s) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t4, this.t = e6;
  }
  get styleSheet() {
    let t4 = this.o;
    const s3 = this.t;
    if (e && void 0 === t4) {
      const e6 = void 0 !== s3 && 1 === s3.length;
      e6 && (t4 = o.get(s3)), void 0 === t4 && ((this.o = t4 = new CSSStyleSheet()).replaceSync(this.cssText), e6 && o.set(s3, t4));
    }
    return t4;
  }
  toString() {
    return this.cssText;
  }
};
var r = (t4) => new n("string" == typeof t4 ? t4 : t4 + "", void 0, s);
var i = (t4, ...e6) => {
  const o4 = 1 === t4.length ? t4[0] : e6.reduce((e7, s3, o5) => e7 + ((t5) => {
    if (true === t5._$cssResult$) return t5.cssText;
    if ("number" == typeof t5) return t5;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + t5 + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(s3) + t4[o5 + 1], t4[0]);
  return new n(o4, t4, s);
};
var S = (s3, o4) => {
  if (e) s3.adoptedStyleSheets = o4.map((t4) => t4 instanceof CSSStyleSheet ? t4 : t4.styleSheet);
  else for (const e6 of o4) {
    const o5 = document.createElement("style"), n4 = t.litNonce;
    void 0 !== n4 && o5.setAttribute("nonce", n4), o5.textContent = e6.cssText, s3.appendChild(o5);
  }
};
var c = e ? (t4) => t4 : (t4) => t4 instanceof CSSStyleSheet ? ((t5) => {
  let e6 = "";
  for (const s3 of t5.cssRules) e6 += s3.cssText;
  return r(e6);
})(t4) : t4;

// node_modules/@lit/reactive-element/reactive-element.js
var { is: i2, defineProperty: e2, getOwnPropertyDescriptor: r2, getOwnPropertyNames: h, getOwnPropertySymbols: o2, getPrototypeOf: n2 } = Object;
var a = globalThis;
var c2 = a.trustedTypes;
var l = c2 ? c2.emptyScript : "";
var p = a.reactiveElementPolyfillSupport;
var d = (t4, s3) => t4;
var u = { toAttribute(t4, s3) {
  switch (s3) {
    case Boolean:
      t4 = t4 ? l : null;
      break;
    case Object:
    case Array:
      t4 = null == t4 ? t4 : JSON.stringify(t4);
  }
  return t4;
}, fromAttribute(t4, s3) {
  let i6 = t4;
  switch (s3) {
    case Boolean:
      i6 = null !== t4;
      break;
    case Number:
      i6 = null === t4 ? null : Number(t4);
      break;
    case Object:
    case Array:
      try {
        i6 = JSON.parse(t4);
      } catch (t5) {
        i6 = null;
      }
  }
  return i6;
} };
var f = (t4, s3) => !i2(t4, s3);
var y = { attribute: true, type: String, converter: u, reflect: false, hasChanged: f };
Symbol.metadata ??= Symbol("metadata"), a.litPropertyMetadata ??= /* @__PURE__ */ new WeakMap();
var b = class extends HTMLElement {
  static addInitializer(t4) {
    this._$Ei(), (this.l ??= []).push(t4);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t4, s3 = y) {
    if (s3.state && (s3.attribute = false), this._$Ei(), this.elementProperties.set(t4, s3), !s3.noAccessor) {
      const i6 = Symbol(), r5 = this.getPropertyDescriptor(t4, i6, s3);
      void 0 !== r5 && e2(this.prototype, t4, r5);
    }
  }
  static getPropertyDescriptor(t4, s3, i6) {
    const { get: e6, set: h3 } = r2(this.prototype, t4) ?? { get() {
      return this[s3];
    }, set(t5) {
      this[s3] = t5;
    } };
    return { get() {
      return e6?.call(this);
    }, set(s4) {
      const r5 = e6?.call(this);
      h3.call(this, s4), this.requestUpdate(t4, r5, i6);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t4) {
    return this.elementProperties.get(t4) ?? y;
  }
  static _$Ei() {
    if (this.hasOwnProperty(d("elementProperties"))) return;
    const t4 = n2(this);
    t4.finalize(), void 0 !== t4.l && (this.l = [...t4.l]), this.elementProperties = new Map(t4.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(d("finalized"))) return;
    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(d("properties"))) {
      const t5 = this.properties, s3 = [...h(t5), ...o2(t5)];
      for (const i6 of s3) this.createProperty(i6, t5[i6]);
    }
    const t4 = this[Symbol.metadata];
    if (null !== t4) {
      const s3 = litPropertyMetadata.get(t4);
      if (void 0 !== s3) for (const [t5, i6] of s3) this.elementProperties.set(t5, i6);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [t5, s3] of this.elementProperties) {
      const i6 = this._$Eu(t5, s3);
      void 0 !== i6 && this._$Eh.set(i6, t5);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(s3) {
    const i6 = [];
    if (Array.isArray(s3)) {
      const e6 = new Set(s3.flat(1 / 0).reverse());
      for (const s4 of e6) i6.unshift(c(s4));
    } else void 0 !== s3 && i6.push(c(s3));
    return i6;
  }
  static _$Eu(t4, s3) {
    const i6 = s3.attribute;
    return false === i6 ? void 0 : "string" == typeof i6 ? i6 : "string" == typeof t4 ? t4.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    this._$ES = new Promise((t4) => this.enableUpdating = t4), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((t4) => t4(this));
  }
  addController(t4) {
    (this._$EO ??= /* @__PURE__ */ new Set()).add(t4), void 0 !== this.renderRoot && this.isConnected && t4.hostConnected?.();
  }
  removeController(t4) {
    this._$EO?.delete(t4);
  }
  _$E_() {
    const t4 = /* @__PURE__ */ new Map(), s3 = this.constructor.elementProperties;
    for (const i6 of s3.keys()) this.hasOwnProperty(i6) && (t4.set(i6, this[i6]), delete this[i6]);
    t4.size > 0 && (this._$Ep = t4);
  }
  createRenderRoot() {
    const t4 = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return S(t4, this.constructor.elementStyles), t4;
  }
  connectedCallback() {
    this.renderRoot ??= this.createRenderRoot(), this.enableUpdating(true), this._$EO?.forEach((t4) => t4.hostConnected?.());
  }
  enableUpdating(t4) {
  }
  disconnectedCallback() {
    this._$EO?.forEach((t4) => t4.hostDisconnected?.());
  }
  attributeChangedCallback(t4, s3, i6) {
    this._$AK(t4, i6);
  }
  _$EC(t4, s3) {
    const i6 = this.constructor.elementProperties.get(t4), e6 = this.constructor._$Eu(t4, i6);
    if (void 0 !== e6 && true === i6.reflect) {
      const r5 = (void 0 !== i6.converter?.toAttribute ? i6.converter : u).toAttribute(s3, i6.type);
      this._$Em = t4, null == r5 ? this.removeAttribute(e6) : this.setAttribute(e6, r5), this._$Em = null;
    }
  }
  _$AK(t4, s3) {
    const i6 = this.constructor, e6 = i6._$Eh.get(t4);
    if (void 0 !== e6 && this._$Em !== e6) {
      const t5 = i6.getPropertyOptions(e6), r5 = "function" == typeof t5.converter ? { fromAttribute: t5.converter } : void 0 !== t5.converter?.fromAttribute ? t5.converter : u;
      this._$Em = e6, this[e6] = r5.fromAttribute(s3, t5.type), this._$Em = null;
    }
  }
  requestUpdate(t4, s3, i6) {
    if (void 0 !== t4) {
      if (i6 ??= this.constructor.getPropertyOptions(t4), !(i6.hasChanged ?? f)(this[t4], s3)) return;
      this.P(t4, s3, i6);
    }
    false === this.isUpdatePending && (this._$ES = this._$ET());
  }
  P(t4, s3, i6) {
    this._$AL.has(t4) || this._$AL.set(t4, s3), true === i6.reflect && this._$Em !== t4 && (this._$Ej ??= /* @__PURE__ */ new Set()).add(t4);
  }
  async _$ET() {
    this.isUpdatePending = true;
    try {
      await this._$ES;
    } catch (t5) {
      Promise.reject(t5);
    }
    const t4 = this.scheduleUpdate();
    return null != t4 && await t4, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    if (!this.isUpdatePending) return;
    if (!this.hasUpdated) {
      if (this.renderRoot ??= this.createRenderRoot(), this._$Ep) {
        for (const [t6, s4] of this._$Ep) this[t6] = s4;
        this._$Ep = void 0;
      }
      const t5 = this.constructor.elementProperties;
      if (t5.size > 0) for (const [s4, i6] of t5) true !== i6.wrapped || this._$AL.has(s4) || void 0 === this[s4] || this.P(s4, this[s4], i6);
    }
    let t4 = false;
    const s3 = this._$AL;
    try {
      t4 = this.shouldUpdate(s3), t4 ? (this.willUpdate(s3), this._$EO?.forEach((t5) => t5.hostUpdate?.()), this.update(s3)) : this._$EU();
    } catch (s4) {
      throw t4 = false, this._$EU(), s4;
    }
    t4 && this._$AE(s3);
  }
  willUpdate(t4) {
  }
  _$AE(t4) {
    this._$EO?.forEach((t5) => t5.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t4)), this.updated(t4);
  }
  _$EU() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t4) {
    return true;
  }
  update(t4) {
    this._$Ej &&= this._$Ej.forEach((t5) => this._$EC(t5, this[t5])), this._$EU();
  }
  updated(t4) {
  }
  firstUpdated(t4) {
  }
};
b.elementStyles = [], b.shadowRootOptions = { mode: "open" }, b[d("elementProperties")] = /* @__PURE__ */ new Map(), b[d("finalized")] = /* @__PURE__ */ new Map(), p?.({ ReactiveElement: b }), (a.reactiveElementVersions ??= []).push("2.0.4");

// node_modules/lit-html/lit-html.js
var t2 = globalThis;
var i3 = t2.trustedTypes;
var s2 = i3 ? i3.createPolicy("lit-html", { createHTML: (t4) => t4 }) : void 0;
var e3 = "$lit$";
var h2 = `lit$${Math.random().toFixed(9).slice(2)}$`;
var o3 = "?" + h2;
var n3 = `<${o3}>`;
var r3 = document;
var l2 = () => r3.createComment("");
var c3 = (t4) => null === t4 || "object" != typeof t4 && "function" != typeof t4;
var a2 = Array.isArray;
var u2 = (t4) => a2(t4) || "function" == typeof t4?.[Symbol.iterator];
var d2 = "[ 	\n\f\r]";
var f2 = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var v = /-->/g;
var _ = />/g;
var m = RegExp(`>|${d2}(?:([^\\s"'>=/]+)(${d2}*=${d2}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var p2 = /'/g;
var g = /"/g;
var $ = /^(?:script|style|textarea|title)$/i;
var y2 = (t4) => (i6, ...s3) => ({ _$litType$: t4, strings: i6, values: s3 });
var x = y2(1);
var b2 = y2(2);
var w = y2(3);
var T = Symbol.for("lit-noChange");
var E = Symbol.for("lit-nothing");
var A = /* @__PURE__ */ new WeakMap();
var C = r3.createTreeWalker(r3, 129);
function P(t4, i6) {
  if (!a2(t4) || !t4.hasOwnProperty("raw")) throw Error("invalid template strings array");
  return void 0 !== s2 ? s2.createHTML(i6) : i6;
}
var V = (t4, i6) => {
  const s3 = t4.length - 1, o4 = [];
  let r5, l3 = 2 === i6 ? "<svg>" : 3 === i6 ? "<math>" : "", c4 = f2;
  for (let i7 = 0; i7 < s3; i7++) {
    const s4 = t4[i7];
    let a3, u3, d3 = -1, y3 = 0;
    for (; y3 < s4.length && (c4.lastIndex = y3, u3 = c4.exec(s4), null !== u3); ) y3 = c4.lastIndex, c4 === f2 ? "!--" === u3[1] ? c4 = v : void 0 !== u3[1] ? c4 = _ : void 0 !== u3[2] ? ($.test(u3[2]) && (r5 = RegExp("</" + u3[2], "g")), c4 = m) : void 0 !== u3[3] && (c4 = m) : c4 === m ? ">" === u3[0] ? (c4 = r5 ?? f2, d3 = -1) : void 0 === u3[1] ? d3 = -2 : (d3 = c4.lastIndex - u3[2].length, a3 = u3[1], c4 = void 0 === u3[3] ? m : '"' === u3[3] ? g : p2) : c4 === g || c4 === p2 ? c4 = m : c4 === v || c4 === _ ? c4 = f2 : (c4 = m, r5 = void 0);
    const x2 = c4 === m && t4[i7 + 1].startsWith("/>") ? " " : "";
    l3 += c4 === f2 ? s4 + n3 : d3 >= 0 ? (o4.push(a3), s4.slice(0, d3) + e3 + s4.slice(d3) + h2 + x2) : s4 + h2 + (-2 === d3 ? i7 : x2);
  }
  return [P(t4, l3 + (t4[s3] || "<?>") + (2 === i6 ? "</svg>" : 3 === i6 ? "</math>" : "")), o4];
};
var N = class _N {
  constructor({ strings: t4, _$litType$: s3 }, n4) {
    let r5;
    this.parts = [];
    let c4 = 0, a3 = 0;
    const u3 = t4.length - 1, d3 = this.parts, [f3, v2] = V(t4, s3);
    if (this.el = _N.createElement(f3, n4), C.currentNode = this.el.content, 2 === s3 || 3 === s3) {
      const t5 = this.el.content.firstChild;
      t5.replaceWith(...t5.childNodes);
    }
    for (; null !== (r5 = C.nextNode()) && d3.length < u3; ) {
      if (1 === r5.nodeType) {
        if (r5.hasAttributes()) for (const t5 of r5.getAttributeNames()) if (t5.endsWith(e3)) {
          const i6 = v2[a3++], s4 = r5.getAttribute(t5).split(h2), e6 = /([.?@])?(.*)/.exec(i6);
          d3.push({ type: 1, index: c4, name: e6[2], strings: s4, ctor: "." === e6[1] ? H : "?" === e6[1] ? I : "@" === e6[1] ? L : k }), r5.removeAttribute(t5);
        } else t5.startsWith(h2) && (d3.push({ type: 6, index: c4 }), r5.removeAttribute(t5));
        if ($.test(r5.tagName)) {
          const t5 = r5.textContent.split(h2), s4 = t5.length - 1;
          if (s4 > 0) {
            r5.textContent = i3 ? i3.emptyScript : "";
            for (let i6 = 0; i6 < s4; i6++) r5.append(t5[i6], l2()), C.nextNode(), d3.push({ type: 2, index: ++c4 });
            r5.append(t5[s4], l2());
          }
        }
      } else if (8 === r5.nodeType) if (r5.data === o3) d3.push({ type: 2, index: c4 });
      else {
        let t5 = -1;
        for (; -1 !== (t5 = r5.data.indexOf(h2, t5 + 1)); ) d3.push({ type: 7, index: c4 }), t5 += h2.length - 1;
      }
      c4++;
    }
  }
  static createElement(t4, i6) {
    const s3 = r3.createElement("template");
    return s3.innerHTML = t4, s3;
  }
};
function S2(t4, i6, s3 = t4, e6) {
  if (i6 === T) return i6;
  let h3 = void 0 !== e6 ? s3._$Co?.[e6] : s3._$Cl;
  const o4 = c3(i6) ? void 0 : i6._$litDirective$;
  return h3?.constructor !== o4 && (h3?._$AO?.(false), void 0 === o4 ? h3 = void 0 : (h3 = new o4(t4), h3._$AT(t4, s3, e6)), void 0 !== e6 ? (s3._$Co ??= [])[e6] = h3 : s3._$Cl = h3), void 0 !== h3 && (i6 = S2(t4, h3._$AS(t4, i6.values), h3, e6)), i6;
}
var M = class {
  constructor(t4, i6) {
    this._$AV = [], this._$AN = void 0, this._$AD = t4, this._$AM = i6;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t4) {
    const { el: { content: i6 }, parts: s3 } = this._$AD, e6 = (t4?.creationScope ?? r3).importNode(i6, true);
    C.currentNode = e6;
    let h3 = C.nextNode(), o4 = 0, n4 = 0, l3 = s3[0];
    for (; void 0 !== l3; ) {
      if (o4 === l3.index) {
        let i7;
        2 === l3.type ? i7 = new R(h3, h3.nextSibling, this, t4) : 1 === l3.type ? i7 = new l3.ctor(h3, l3.name, l3.strings, this, t4) : 6 === l3.type && (i7 = new z(h3, this, t4)), this._$AV.push(i7), l3 = s3[++n4];
      }
      o4 !== l3?.index && (h3 = C.nextNode(), o4++);
    }
    return C.currentNode = r3, e6;
  }
  p(t4) {
    let i6 = 0;
    for (const s3 of this._$AV) void 0 !== s3 && (void 0 !== s3.strings ? (s3._$AI(t4, s3, i6), i6 += s3.strings.length - 2) : s3._$AI(t4[i6])), i6++;
  }
};
var R = class _R {
  get _$AU() {
    return this._$AM?._$AU ?? this._$Cv;
  }
  constructor(t4, i6, s3, e6) {
    this.type = 2, this._$AH = E, this._$AN = void 0, this._$AA = t4, this._$AB = i6, this._$AM = s3, this.options = e6, this._$Cv = e6?.isConnected ?? true;
  }
  get parentNode() {
    let t4 = this._$AA.parentNode;
    const i6 = this._$AM;
    return void 0 !== i6 && 11 === t4?.nodeType && (t4 = i6.parentNode), t4;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t4, i6 = this) {
    t4 = S2(this, t4, i6), c3(t4) ? t4 === E || null == t4 || "" === t4 ? (this._$AH !== E && this._$AR(), this._$AH = E) : t4 !== this._$AH && t4 !== T && this._(t4) : void 0 !== t4._$litType$ ? this.$(t4) : void 0 !== t4.nodeType ? this.T(t4) : u2(t4) ? this.k(t4) : this._(t4);
  }
  O(t4) {
    return this._$AA.parentNode.insertBefore(t4, this._$AB);
  }
  T(t4) {
    this._$AH !== t4 && (this._$AR(), this._$AH = this.O(t4));
  }
  _(t4) {
    this._$AH !== E && c3(this._$AH) ? this._$AA.nextSibling.data = t4 : this.T(r3.createTextNode(t4)), this._$AH = t4;
  }
  $(t4) {
    const { values: i6, _$litType$: s3 } = t4, e6 = "number" == typeof s3 ? this._$AC(t4) : (void 0 === s3.el && (s3.el = N.createElement(P(s3.h, s3.h[0]), this.options)), s3);
    if (this._$AH?._$AD === e6) this._$AH.p(i6);
    else {
      const t5 = new M(e6, this), s4 = t5.u(this.options);
      t5.p(i6), this.T(s4), this._$AH = t5;
    }
  }
  _$AC(t4) {
    let i6 = A.get(t4.strings);
    return void 0 === i6 && A.set(t4.strings, i6 = new N(t4)), i6;
  }
  k(t4) {
    a2(this._$AH) || (this._$AH = [], this._$AR());
    const i6 = this._$AH;
    let s3, e6 = 0;
    for (const h3 of t4) e6 === i6.length ? i6.push(s3 = new _R(this.O(l2()), this.O(l2()), this, this.options)) : s3 = i6[e6], s3._$AI(h3), e6++;
    e6 < i6.length && (this._$AR(s3 && s3._$AB.nextSibling, e6), i6.length = e6);
  }
  _$AR(t4 = this._$AA.nextSibling, i6) {
    for (this._$AP?.(false, true, i6); t4 && t4 !== this._$AB; ) {
      const i7 = t4.nextSibling;
      t4.remove(), t4 = i7;
    }
  }
  setConnected(t4) {
    void 0 === this._$AM && (this._$Cv = t4, this._$AP?.(t4));
  }
};
var k = class {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(t4, i6, s3, e6, h3) {
    this.type = 1, this._$AH = E, this._$AN = void 0, this.element = t4, this.name = i6, this._$AM = e6, this.options = h3, s3.length > 2 || "" !== s3[0] || "" !== s3[1] ? (this._$AH = Array(s3.length - 1).fill(new String()), this.strings = s3) : this._$AH = E;
  }
  _$AI(t4, i6 = this, s3, e6) {
    const h3 = this.strings;
    let o4 = false;
    if (void 0 === h3) t4 = S2(this, t4, i6, 0), o4 = !c3(t4) || t4 !== this._$AH && t4 !== T, o4 && (this._$AH = t4);
    else {
      const e7 = t4;
      let n4, r5;
      for (t4 = h3[0], n4 = 0; n4 < h3.length - 1; n4++) r5 = S2(this, e7[s3 + n4], i6, n4), r5 === T && (r5 = this._$AH[n4]), o4 ||= !c3(r5) || r5 !== this._$AH[n4], r5 === E ? t4 = E : t4 !== E && (t4 += (r5 ?? "") + h3[n4 + 1]), this._$AH[n4] = r5;
    }
    o4 && !e6 && this.j(t4);
  }
  j(t4) {
    t4 === E ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t4 ?? "");
  }
};
var H = class extends k {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t4) {
    this.element[this.name] = t4 === E ? void 0 : t4;
  }
};
var I = class extends k {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t4) {
    this.element.toggleAttribute(this.name, !!t4 && t4 !== E);
  }
};
var L = class extends k {
  constructor(t4, i6, s3, e6, h3) {
    super(t4, i6, s3, e6, h3), this.type = 5;
  }
  _$AI(t4, i6 = this) {
    if ((t4 = S2(this, t4, i6, 0) ?? E) === T) return;
    const s3 = this._$AH, e6 = t4 === E && s3 !== E || t4.capture !== s3.capture || t4.once !== s3.once || t4.passive !== s3.passive, h3 = t4 !== E && (s3 === E || e6);
    e6 && this.element.removeEventListener(this.name, this, s3), h3 && this.element.addEventListener(this.name, this, t4), this._$AH = t4;
  }
  handleEvent(t4) {
    "function" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t4) : this._$AH.handleEvent(t4);
  }
};
var z = class {
  constructor(t4, i6, s3) {
    this.element = t4, this.type = 6, this._$AN = void 0, this._$AM = i6, this.options = s3;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t4) {
    S2(this, t4);
  }
};
var j = t2.litHtmlPolyfillSupport;
j?.(N, R), (t2.litHtmlVersions ??= []).push("3.2.1");
var B = (t4, i6, s3) => {
  const e6 = s3?.renderBefore ?? i6;
  let h3 = e6._$litPart$;
  if (void 0 === h3) {
    const t5 = s3?.renderBefore ?? null;
    e6._$litPart$ = h3 = new R(i6.insertBefore(l2(), t5), t5, void 0, s3 ?? {});
  }
  return h3._$AI(t4), h3;
};

// node_modules/lit-element/lit-element.js
var r4 = class extends b {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    const t4 = super.createRenderRoot();
    return this.renderOptions.renderBefore ??= t4.firstChild, t4;
  }
  update(t4) {
    const s3 = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t4), this._$Do = B(s3, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    super.connectedCallback(), this._$Do?.setConnected(true);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this._$Do?.setConnected(false);
  }
  render() {
    return T;
  }
};
r4._$litElement$ = true, r4["finalized"] = true, globalThis.litElementHydrateSupport?.({ LitElement: r4 });
var i4 = globalThis.litElementPolyfillSupport;
i4?.({ LitElement: r4 });
(globalThis.litElementVersions ??= []).push("4.1.1");

// ../index.js
var zoneSize = 100;
var inBottomLeftZoneId = null;
var inTopRightZoneId = null;
var timeoutId = null;
var timeoutTriggered = false;
function checkInTopRightZone(clientX, clientY) {
  if (clientX > window.innerWidth - zoneSize && clientY < zoneSize) {
    return true;
  }
  return false;
}
function checkInBottomLeftZone(clientX, clientY) {
  if (clientX < zoneSize && clientY > window.innerHeight - zoneSize) {
    return true;
  }
  return false;
}
function onTouchStart(e6) {
  if (document.fullscreenElement) {
    e6.preventDefault();
    e6.stopPropagation();
  }
  if (e6.touches.length === 2) {
    for (let touch of e6.touches) {
      const { identifier, clientX, clientY } = touch;
      if (checkInTopRightZone(clientX, clientY)) {
        inBottomLeftZoneId = identifier;
      }
      if (checkInBottomLeftZone(clientX, clientY)) {
        inTopRightZoneId = identifier;
      }
    }
  }
  if (inBottomLeftZoneId !== null && inTopRightZoneId !== null) {
    timeoutTriggered = false;
    timeoutId = setTimeout(() => {
      timeoutTriggered = true;
      const $div = document.createElement("div");
      $div.style.width = `${window.innerWidth}px`;
      $div.style.height = `${window.innerHeight}px`;
      $div.style.position = "absolute";
      $div.style.top = "0px";
      $div.style.left = "0px";
      $div.style.zIndex = 1e6;
      $div.style.backgroundColor = "#cd7afaff";
      document.body.appendChild($div);
      setTimeout(() => $div.remove(), 100);
    }, 2e3);
  }
}
function onTouchMove(e6) {
  if (document.fullscreenElement) {
    e6.preventDefault();
    e6.stopPropagation();
  }
}
function onTouchEnd(e6) {
  if (document.fullscreenElement) {
    e6.preventDefault();
    e6.stopPropagation();
  }
  if (e6.touches.length === 2) {
    for (let touch of e6.touches) {
      const { identifier, clientX, clientY } = touch;
      if (!(checkInTopRightZone(clientX, clientY) && inBottomLeftZoneId === identifier)) {
        inBottomLeftZoneId = null;
      }
      if (!(checkInBottomLeftZone(clientX, clientY) && inTopRightZoneId === identifier)) {
        inTopRightZoneId = null;
      }
    }
  }
  if (timeoutTriggered && inBottomLeftZoneId !== null && inTopRightZoneId !== null) {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
    } else if (document.exitFullscreen) {
      document.exitFullscreen();
    }
  }
  inBottomLeftZoneId = null;
  inTopRightZoneId = null;
  clearTimeout(timeoutId);
}
var funny_lock_screen_default = {
  enable() {
    window.addEventListener("touchstart", onTouchStart);
    window.addEventListener("touchmove", onTouchMove);
    window.addEventListener("touchend", onTouchEnd);
    window.addEventListener("touchcancel", onTouchEnd);
  },
  disable() {
    window.removeEventListener("touchstart", onTouchStart);
    window.removeEventListener("touchmove", onTouchMove);
    window.removeEventListener("touchend", onTouchEnd);
    window.removeEventListener("touchcancel", onTouchEnd);
  }
};

// node_modules/lit-html/directive.js
var t3 = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 };
var e4 = (t4) => (...e6) => ({ _$litDirective$: t4, values: e6 });
var i5 = class {
  constructor(t4) {
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AT(t4, e6, i6) {
    this._$Ct = t4, this._$AM = e6, this._$Ci = i6;
  }
  _$AS(t4, e6) {
    return this.update(t4, e6);
  }
  update(t4, e6) {
    return this.render(...e6);
  }
};

// node_modules/lit-html/directives/class-map.js
var e5 = e4(class extends i5 {
  constructor(t4) {
    if (super(t4), t4.type !== t3.ATTRIBUTE || "class" !== t4.name || t4.strings?.length > 2) throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.");
  }
  render(t4) {
    return " " + Object.keys(t4).filter((s3) => t4[s3]).join(" ") + " ";
  }
  update(s3, [i6]) {
    if (void 0 === this.st) {
      this.st = /* @__PURE__ */ new Set(), void 0 !== s3.strings && (this.nt = new Set(s3.strings.join(" ").split(/\s/).filter((t4) => "" !== t4)));
      for (const t4 in i6) i6[t4] && !this.nt?.has(t4) && this.st.add(t4);
      return this.render(i6);
    }
    const r5 = s3.element.classList;
    for (const t4 of this.st) t4 in i6 || (r5.remove(t4), this.st.delete(t4));
    for (const t4 in i6) {
      const s4 = !!i6[t4];
      s4 === this.st.has(t4) || this.nt?.has(t4) || (s4 ? (r5.add(t4), this.st.add(t4)) : (r5.remove(t4), this.st.delete(t4)));
    }
    return T;
  }
});

// node_modules/@ircam/sc-components/src/styles.js
var cssVars = `
:root {
  --sc-font-family: Consolas, monaco, monospace;
  --sc-font-size: 11px;
  --sc-color-primary-1: #121212ff;
  --sc-color-primary-2: #272822ff;
  --sc-color-primary-3: #3d3e39ff;
  --sc-color-primary-4: #878585ff;
  --sc-color-primary-5: #dededeff;
  --sc-color-secondary-1: #f4b43eff; /* orange / yellow */
  --sc-color-secondary-2: #1c78c0ff; /* blue */
  --sc-color-secondary-3: #d9534fff; /* red */
  --sc-color-secondary-4: #5ec451ff; /* green */
  --sc-color-secondary-5: #cd7afaff; /* lila */
}
`;
var $style = document.createElement("style");
$style.type = "text/css";
$style.appendChild(document.createTextNode(""));
var $firstStylesheet = document.querySelector("style");
if ($firstStylesheet) {
  $firstStylesheet.parentNode.insertBefore($style, $firstStylesheet);
} else {
  document.head.appendChild($style);
}
$style.sheet.insertRule(cssVars);

// node_modules/@ircam/sc-components/src/ScElement.js
var id = 0;
var userSelectNoneOnBodyRegister = /* @__PURE__ */ new Set();
function requestUserSelectNoneOnBody(id2) {
  if (userSelectNoneOnBodyRegister.size === 0) {
    document.body.style.userSelect = "none";
    document.body.style.webkitUserSelect = "none";
    document.body.style.webkitTouchCallout = "none";
  }
  userSelectNoneOnBodyRegister.add(id2);
}
function cancelUserSelectNoneOnBody(id2) {
  userSelectNoneOnBodyRegister.delete(id2);
  if (userSelectNoneOnBodyRegister.size === 0) {
    document.body.style.userSelect = "auto";
    document.body.style.webkitUserSelect = "auto";
    document.body.style.webkitTouchCallout = "auto";
  }
}
var ScElement = class extends r4 {
  constructor() {
    super();
    this._scId = `${this.tagName.toLowerCase()}-${id++}`;
    this._preventContextMenu = this._preventContextMenu.bind(this);
  }
  connectedCallback() {
    super.connectedCallback();
    if (!("SC_DEBUG" in window) || window.SC_DEBUG !== true) {
      this.addEventListener("contextmenu", this._preventContextMenu);
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("contextmenu", this._preventContextMenu);
  }
  _preventContextMenu(e6) {
    e6.preventDefault();
  }
  /* protected method */
  _requestUserSelectNoneOnBody() {
    requestUserSelectNoneOnBody(this._scId);
  }
  /* protected method */
  _cancelUserSelectNoneOnBody() {
    cancelUserSelectNoneOnBody(this._scId);
  }
};
var ScElement_default = ScElement;

// node_modules/@ircam/sc-components/src/mixins/midi-controlled.js
var midiLearnSymbol = Symbol.for("sc-midi");
if (!globalThis[midiLearnSymbol]) {
  globalThis[midiLearnSymbol] = /* @__PURE__ */ new Set();
}
var midi_controlled_default = (className, parent) => {
  class child extends parent {
    static properties = {
      midiLearnActive: {
        // true is the sc-midi-learn component is active
        type: Boolean,
        reflect: true,
        attribute: "midi-learn-active"
      },
      midiLearnSelected: {
        // true if this element is selected for binding
        type: Boolean,
        reflect: true,
        attribute: "midi-learn-selected"
      },
      midiControlInfos: {
        state: true
      },
      midiControlHighlight: {
        type: Boolean,
        state: true
      }
    };
    static styles = i`
      ${parent.styles}

      :host {
        position: relative;
      }

      .midi-control-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 20;
        color: black;
        overflow: hidden;
        white-space: nowrap;
        user-select: none;
        webkit-user-select: none;
        webkit-touch-callout: none;
        box-sizing: border-box;
      }

      .midi-control-overlay span {
        position: absolute;
        top: 0;
        left: 2px;
        font-size: 9px;
        height: 12px;
        line-height: 12px;
      }

      .midi-control-overlay::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: .4;
        z-index: -1;
        background-color: var(--sc-color-secondary-2);
      }

      .midi-control-overlay.learning::before {
        background-color: var(--sc-color-secondary-3);
      }

      .midi-control-overlay.mapped::before {
        background-color: var(--sc-color-secondary-4);
      }

      .midi-control-overlay.highlight {
        border: 1px solid var(--sc-color-primary-5);
      }
    `;
    constructor() {
      super();
      const tagName = this.tagName.toLowerCase();
      globalThis[midiLearnSymbol].add(tagName);
      if (!("midiValue" in this) || !("midiType" in this)) {
        throw new Error(`[sc-components] "${className}" must implement "midiType" getter  ("control" or "instrument") AND "midiValue" getter and setter to map from midi value to component value`);
      }
      this.midiLearnState = "idle";
    }
    render() {
      const template = super.render();
      if (this.midiLearnActive) {
        let stateClass = "idle";
        if (this.midiControlInfos) {
          stateClass = "mapped";
        }
        if (this.midiLearnSelected) {
          stateClass = "learning";
        }
        const classes = {
          "midi-control-overlay": true,
          mapped: this.midiControlInfos && !this.midiLearnSelected,
          learning: this.midiLearnSelected,
          highlight: this.midiControlHighlight
        };
        return x`
          <div class="${e5(classes)}">
            ${this.midiControlInfos ? x`<span>cc ${this.midiControlInfos.channel} - ${this.midiControlInfos.deviceString}</span>` : E}
          </div>
          ${template}
        `;
      } else {
        this.midiControlHighlight = false;
        return template;
      }
    }
  }
  Object.defineProperty(child, "name", { value: className });
  return child;
};

// node_modules/@ircam/sc-components/src/controllers/keyboard-controller.js
var KeyboardController = class {
  constructor(host, options) {
    if (!options.callback) {
      throw new Error(`keyboard-controller: callback option is mandatory`);
    }
    this._host = host;
    this._filterCodes = options.filterCodes || [];
    this._filterKeys = options.filterKeys || [];
    this._callback = options.callback;
    this._deduplicateEvents = options.deduplicateEvents || false;
    this._debug = options.debug || false;
    this._codeLastEventTypeMap = /* @__PURE__ */ new Map();
    host.addController(this);
    this._onFocus = this._onFocus.bind(this);
    this._onBlur = this._onBlur.bind(this);
    this._triggerEvent = this._triggerEvent.bind(this);
  }
  hostConnected() {
    this._host.addEventListener("focus", this._onFocus);
    this._host.addEventListener("blur", this._onBlur);
  }
  hostDisconnected() {
    this._host.removeEventListener("focus", this._onFocus);
    this._host.removeEventListener("blur", this._onBlur);
  }
  _onFocus() {
    document.addEventListener("keydown", this._triggerEvent);
    document.addEventListener("keyup", this._triggerEvent);
  }
  _onBlur() {
    document.removeEventListener("keydown", this._triggerEvent);
    document.removeEventListener("keyup", this._triggerEvent);
  }
  _triggerEvent(e6) {
    if (this._debug) {
      console.log("code:", e6.code, "- key:", e6.key);
    }
    if (this._filterCodes.includes(e6.code) || this._filterKeys.includes(e6.key)) {
      e6.preventDefault();
      if (this._deduplicateEvents) {
        const lastEventType = this._codeLastEventTypeMap.get(e6.code);
        if (lastEventType === e6.type) {
          return;
        }
      }
      this._codeLastEventTypeMap.set(e6.code, e6.type);
      this._callback(e6);
    }
  }
};
var keyboard_controller_default = KeyboardController;

// node_modules/@ircam/sc-components/src/sc-button.js
var ScButtonBase = class extends ScElement_default {
  static properties = {
    value: {
      type: String,
      reflect: true
    },
    midiValue: {
      type: Number
    },
    selected: {
      type: Boolean,
      reflect: true
    },
    disabled: {
      type: Boolean,
      reflect: true
    },
    disableKeyboard: {
      type: Boolean,
      reflect: true,
      attribute: "disable-keyboard"
    },
    _pressed: {
      type: Boolean,
      state: true
    }
  };
  static styles = i`
    :host {
      vertical-align: top;
      display: inline-block;
      box-sizing: border-box;
      overflow: hidden;
      width: 200px;
      height: 30px;
      line-height: 0;
      font-size: var(--sc-font-size);
      color: #ffffff;
      border: 1px solid var(--sc-color-primary-3);
      font-family: var(--sc-font-family);

      --sc-button-background-color: var(--sc-color-primary-2);
      --sc-button-background-color-hover: var(--sc-color-primary-3);
      --sc-button-background-color-active: var(--sc-color-primary-4);
      --sc-button-background-color-selected: var(--sc-color-secondary-3);
    }

    :host([hidden]) {
      display: none
    }

    :host([disabled]) {
      opacity: 0.7;
    }

    :host(:focus), :host(:focus-visible) {
      outline: none;
      border: 1px solid var(--sc-color-primary-4);
    }

    button {
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      font-family: inherit;
      background-color: var(--sc-button-background-color);
      border: none;
      font-size: inherit;
      color: inherit;
      cursor: pointer;
    }

    /* remove default button focus */
    button:focus, button:focus-visible {
      outline: none;
    }

    button:hover {
      background-color: var(--sc-button-background-color-hover);
    }

    button.selected {
      background-color: var(--sc-button-background-color-selected);
    }

    :host([selected]) {
      border: 1px solid var(--sc-button-background-color-selected);
    }

    /* use class because :active does not work in Firefox because of e.preventDefault(); */
    button.active {
      background-color: var(--sc-button-background-color-active);
    }

    /* prevent any layout change when disabled */
    :host([disabled]) button {
      cursor: default;
    }

    :host([disabled]) button:hover {
      background-color: var(--sc-button-background-color);
      cursor: default;
    }

    :host([disabled]) button.selected:hover {
      background-color: var(--sc-button-background-color-selected);
      cursor: default;
    }
  `;
  // sc-midi controller interface
  get midiType() {
    return "control";
  }
  set midiValue(value) {
    if (this.disabled) {
      return;
    }
    const eventName = value === 0 ? "release" : "press";
    this._dispatchEvent(eventName);
  }
  get midiValue() {
    return this._pressed ? 127 : 0;
  }
  constructor() {
    super();
    this.value = null;
    this.selected = false;
    this.disabled = false;
    this._pressed = false;
    this._keyboard = new keyboard_controller_default(this, {
      filterCodes: ["Enter", "Space"],
      callback: this._onKeyboardEvent.bind(this),
      deduplicateEvents: true
    });
  }
  render() {
    const classes = {
      active: this._pressed,
      selected: this.selected
    };
    return x`
      <button
        tabindex="-1"
        class="${e5(classes)}"
        @mousedown="${this._onEvent}"
        @mouseup="${this._onEvent}"
        @touchstart="${{
      handleEvent: this._onEvent.bind(this),
      passive: false
    }}"
        @touchend="${this._onEvent}"
      >
        <slot>${this.value}</slot>
      </button>
    `;
  }
  updated(changedProperties) {
    if (changedProperties.has("disabled")) {
      const tabindex = this.disabled ? -1 : this._tabindex;
      this.setAttribute("tabindex", tabindex);
      if (this.disabled) {
        this.blur();
      }
    }
  }
  connectedCallback() {
    super.connectedCallback();
    this._tabindex = this.getAttribute("tabindex") || 0;
  }
  _onKeyboardEvent(e6) {
    if (this.disabled || this.disableKeyboard) {
      return;
    }
    const eventName = e6.type === "keydown" ? "press" : "release";
    this._dispatchEvent(eventName);
  }
  _onEvent(e6) {
    e6.preventDefault();
    if (this.disabled) {
      return;
    }
    this.focus();
    const eventName = e6.type === "touchend" || e6.type === "mouseup" ? "release" : "press";
    this._dispatchEvent(eventName);
  }
  _dispatchEvent(eventName) {
    if (eventName === "release" && this._pressed === false) {
      return;
    }
    const value = this.value === null ? this.textContent : this.value;
    this._pressed = eventName === "press";
    const event = new CustomEvent(eventName, {
      bubbles: true,
      composed: true,
      detail: { value }
    });
    this.dispatchEvent(event);
    if (eventName === "press") {
      const inputEvent = new CustomEvent("input", {
        bubbles: true,
        composed: true,
        detail: { value }
      });
      this.dispatchEvent(inputEvent);
    }
  }
};
var ScButton = midi_controlled_default("ScButton", ScButtonBase);
if (customElements.get("sc-button") === void 0) {
  customElements.define("sc-button", ScButton);
}

// src/index.js
funny_lock_screen_default.enable();
B(x`
  <div class="top-right"></div>
  <div class="bottom-left"></div>
  <sc-button
    @input=${() => funny_lock_screen_default.enable()}
  >Enable</sc-button>
  <sc-button
    @input=${() => funny_lock_screen_default.disable()}
  >Disable</sc-button>
`, document.body);
/*! Bundled license information:

@lit/reactive-element/css-tag.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/reactive-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/lit-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-element/lit-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/is-server.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/class-map.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=data:application/json;base64,
